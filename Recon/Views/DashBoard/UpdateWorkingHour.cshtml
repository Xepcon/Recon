@using Microsoft.AspNetCore.Http

@inject IHttpContextAccessor HttpContextAccessor

<style>
    .dx-scheduler-work-space {
        border: none;
    }

</style>
<p>Working Hours !</p>
<div>
    <span> Working Start</span>
    <div id="working-start-interval"></div>
</div>

<div>
    <span> Working End</span>
    <div id="working-end-interval"></div>
</div>

<div style="margin-bottom:100px">
    <span>Lunch</span>
    <div id="lunch-interval"></div>
</div>




<div>
    <div id="scheduler"></div>
</div>

<button  id="save-btn" >Save</button>
<script>

    
       
    
    $(() => {

        var TimeTable 
        $.ajax({
            type: "GET",
            url: "/api/UpdateWorkHour/getWorkTime/",
            data: { userid: `@HttpContextAccessor.HttpContext.Session.GetString("UserId")` },
            success: function(response) {
                // Handle the successful response here
                TimeTable = response
                setTimeTable(TimeTable);
                console.log(response);
            },
            error: function(xhr, textStatus, errorThrown) {
                // Handle any errors here
                console.log("Error: " + errorThrown);
            }
        });
        console.log("Test");
        console.log(TimeTable)

          $('#scheduler').dxScheduler({
            timeZone: 'Europe/Paris',
            views: ['day'],
            currentView: 'day',
            currentDate: new Date(),
            startDayHour: 0,
            endDayHour: 24,
            toolbar: [],
           // showToolbar: false,
            showAllDayPanel: false,
            height: 500,
               editing: {
                allowDragging: false,
                allowResizing: false,
                allowDeleting: false,
                allowUpdating: false,
                allowAdding: false
            },
            showToolbar: false,
            intervalCount: 24,
             onAppointmentClick: function(e) {
        e.component.showAppointmentPopup = function() {}; // override method
    }
            
        });

        
        var lunchStartTime = new Date()
        var lunchEndTime = new Date()
        var workingStartTime = new Date()
        var workingEndTime = new Date()

        console.log(lunchStartTime)

        lunchStartTime.setHours(12, 0, 0)
        lunchEndTime.setHours(13, 0, 0)
        workingStartTime.setHours(8, 0, 0)
        workingEndTime.setHours(16, 0, 0)
        

        function setTimeTable(TimeTable) {
            let startTimeParts = TimeTable.startTime.split(":");
            let startHours = parseInt(startTimeParts[0]);
            let startMinutes = parseInt(startTimeParts[1]);
            let startAmPm = startTimeParts[2].split(" ")[1];
            if(startAmPm=="AM"){
                workingStartTime.setHours(startHours, startMinutes, 0)
            }else{
                workingStartTime.setHours(12+startHours, startMinutes, 0)
            }
            
            let endTimeParts = TimeTable.endTime.split(":");
            let endHours = parseInt(endTimeParts[0]);
            let endMinutes = parseInt(endTimeParts[1]);
            let EndAmPm = endTimeParts[2].split(" ")[1];
            if (EndAmPm == "AM") {
                workingEndTime.setHours(endHours, endMinutes, 0)
            }else{
                workingEndTime.setHours(12+endHours, endMinutes, 0)
            }
            //workingEndTime.setHours(endHours, endMinutes, 0)
            let launchStart = TimeTable.lunchStartTime.split(":");
            let startlunchHour = parseInt(launchStart[0]);
            let startlunchMinutes = parseInt(launchStart[1]);
            let starLunchAmPm = endTimeParts[2].split(" ")[1];
            if (starLunchAmPm == "AM") {
                lunchStartTime.setHours(startlunchHour, startlunchMinutes,0)
            } else {
                lunchStartTime.setHours(12+startlunchHour, startlunchMinutes, 0)
            }
            //lunchStartTime.setHours(startlunchHour, startlunchMinutes,0)
            let launchEnd = TimeTable.lunchEndTime.split(":");
            let endlunchHour = parseInt(launchEnd[0]);
            let endlunchMinutes = parseInt(launchEnd[1]);
            let endLunchAmPm = endTimeParts[2].split(" ")[1];
             if (starLunchAmPm == "AM") {
                lunchEndTime.setHours(endlunchHour, endlunchMinutes, 0)
            } else {
                lunchEndTime.setHours(12+endlunchHour, endlunchMinutes, 0)
            }
            //lunchEndTime.setHours(endlunchHour, endlunchMinutes, 0)
            updateSchedulerData();
        }
      

        $('#lunch-interval').dxDateBox({
            type: "time",
            value: lunchStartTime,
            interval: 15,
            onValueChanged: function (e) {
                lunchStartTime = e.value;
                lunchEndTime = new Date(lunchStartTime.getTime() + 1 * 60 * 60 * 1000);
                updateSchedulerData();
            }
        });
        $('#working-start-interval').dxDateBox({
            type: "time",
            value: workingStartTime,
            interval: 15,
            onValueChanged: function (e) {
                workingStartTime = e.value;
                //morningEndTime = new Date(morningStartTime.getTime() + 4 * 60 * 60 * 1000);
                updateSchedulerData();
            }
        });
        $('#working-end-interval').dxDateBox({
            type: "time",
            value: workingEndTime,
            interval: 15,
            onValueChanged: function (e) {
                workingEndTime = e.value;
                updateSchedulerData();
            }
        });

       

        const updateSchedulerData = () => {
            console.log(workingStartTime)
            console.log(workingEndTime)
            
            console.log(lunchStartTime)
            console.log(lunchEndTime)
            const data = [
                {
                    startDate: workingStartTime,
                    endDate: workingEndTime,
                    text: "Working"

                },
                 {
                    startDate: lunchStartTime,
                    endDate: lunchEndTime,
                    text: "Lunch",
                    color: "#00ff00"
                }
              
            ];
            $('#scheduler').dxScheduler('instance').option('dataSource', data);
        }

        updateSchedulerData();


        $("#save-btn").click(function () {
            var startTime = $("#working-start-interval").dxDateBox("instance").option("value");
            var endTime = $("#working-end-interval").dxDateBox("instance").option("value");
            var lunchStartTime = $("#lunch-interval").dxDateBox("instance").option("value");
            var lunchEndTime = $("#lunch-interval").dxDateBox("instance").option("value");
            var newLunchEndTime = new Date(lunchEndTime);
            newLunchEndTime.setHours(newLunchEndTime.getHours() + 1);
            var startTimeString = startTime.toLocaleTimeString() 
            var endTimeString = endTime.toLocaleTimeString()
            var lunchStartTimeString = lunchStartTime.toLocaleTimeString()
            var lunchEndTimeString = newLunchEndTime.toLocaleTimeString()
            // Validate input data here
           
            var data = {
                UserId : @HttpContextAccessor.HttpContext.Session.GetString("UserId"),
                StartTime: startTimeString,
                EndTime: endTimeString,
                LunchStartTime: lunchStartTimeString,
                LunchEndTime: lunchEndTimeString
            };
            console.log(data);
            $.ajax({
                type: "POST",
                url: "/api/UpdateWorkHour/SaveWorkTime",
                data: JSON.stringify(data),
                contentType: "application/json",
                success: function (response) {
                   
                },
                error: function (xhr, textStatus, errorThrown) {
                    alert("Error saving data: " + xhr.responseText);
                }
            });
        });
    });


   
</script>