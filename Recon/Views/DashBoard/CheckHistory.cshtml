@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
<style>
    .hour-container {
        display: inline-block;
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
        width: 200px;
        height: 100px;
        margin-right: 10px;
        text-align: center;
        
        background-color: #6C63FF;
    }

    .hour-item {
        
        color: white;
        padding-top:15px;
    }

    .hour-value-body {
        padding: 10px;
    }
</style>

@using Microsoft.AspNetCore.Http

@inject IHttpContextAccessor HttpContextAccessor

<div style="height:260px"id="range-selector"></div>


<div style="margin-top:50px; margin-bottom:100px!important;" id="chart"></div>

<div class="hour-container">      
    <div class="hour-item">            
        <h4>Ledolgozott órák</h4>  
        <div class="hour-value-body">
            <p id="worked-label">42 óra 22 perc</p>
        </div>
    </div>       
</div>
<div class="hour-container">      
    <div class="hour-item">            
        <h4>Szünetek</h4>  
        <div class="hour-value-body">
            <p id="break-label">42 óra 22 perc</p>
        </div>
    </div>       
</div>

<script>

       
    $('#chart').dxChart({
        
        rotated: true,
        argumentAxis: {
            categories: ['Week days'],
            tick: {
                visible: false,
            },
        },
        title: {
            text: 'Heti kimutatás ',
        },
        valueAxis: {
            type: 'continuous',
            min: new Date(2022, 3, 1, 0),
            max: new Date(2022, 3, 2, 0),
            tickInterval: { minutes: 30 }
        },
        commonSeriesSettings: {
            argumentField: 'date',
            type: 'rangeBar',
            rangeValue1Field: 'start',
            rangeValue2Field: 'end',
            ignoreEmptyPoints: true,
            barOverlapGroup: 'date',
            barWidth: 10,

        },
        seriesTemplate: {
            nameField: 'type',

        },
        legend: {
            title: 'Ledogozott órák',
            verticalAlignment: 'bottom',
            horizontalAlignment: 'center',
        },
    });

    const chartInstance = $('#chart').dxChart('instance');
    
   

    

   

    var userid = @HttpContextAccessor.HttpContext.Session.GetString("UserId");
  
  

  

    $(function () {               

       var rangeSelector = $("#range-selector").dxRangeSelector({
        margin: {
            top: 50,
        },
        scale: {
            startValue: new Date(2022, 1, 1),
            endValue: new Date(2022, 12, 1),
            minorTickInterval: 'week',
            tickInterval: 'week',
            minRange: 'week',
            maxRange: 'week',
            minorTick: {
                visible: false,
            },
        },
        sliderMarker: {
            format: 'monthAndDay',
        },
        value: [new Date(2022, 1, 28), new Date(2022, 2, 7)],
        title: 'Válasz ki egy intervallumot',

            onValueChanged: function (e) {
                var startDate = e.value[0];
                var endDate = e.value[1];
                var days = Math.floor((endDate - startDate) / (1000 * 60 * 60 * 24));
                $.ajax({
                    url: "/api/UserCheckInGetter/" + userid + "?startDate=" + startDate.toISOString() + "&endDate=" + endDate.toISOString(),
                    method: "GET",
                    success: function(data) {
                       
                        IntervalCalculate(data)
                      
                    },
                    error: function(error) {
                       
                    }
                });
              
        }
    }).dxRangeSelector("instance");

    });

    $(document).ready(function () {
        var startDate = new Date(2022, 1, 28);
        var endDate = new Date(2022, 2, 7);
        var days = Math.floor((endDate - startDate) / (1000 * 60 * 60 * 24));
        $.ajax({
            url: "/api/UserCheckInGetter/" + userid + "?startDate=" + startDate.toISOString() + "&endDate=" + endDate.toISOString(),
            method: "GET",
            success: function (data) {
                IntervalCalculate(data)
            },
            error: function (error) {
            }
        });
    });
</script>